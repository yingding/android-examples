/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The version and content is updated
 * Copyright 2021 Yingding Wang
 */
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {

        /* global variables */
        kotlin_version = '1.5.20' // '1.3.61'

        /* local variables (use def)*/
        // cores
        def appcompat_version = '1.3.1'// '1.1.0'
        def coroutines_android_version = '1.5.1' // '1.4.1' // '1.3.2'
        // def lifecycle_version = '2.2.0' // '2.1.0'
        def lifecycle_viewmodel_version = '2.3.1'
        def livedata_version = '2.3.1' // '2.2.0-rc02'

        // DB and Background
        def room_version = '2.3.0' // '2.2.2'
        def work_version = '2.5.0' // '2.2.0'
        // UX
        def constraint_layout_version = '2.1.0'// '1.1.3'
        def material_version = '1.4.0' // '1.0.0'
        // connections
        def gson_version = '2.8.7' // '2.8.6'
        def retrofit_gson_version = '2.9.0' // '2.6.2'
        def retrofit_version = '2.9.0' // '2.6.2' suspend function is support with retrofit > 2.6.0

        // testings
        def junit_version = '4.13.2' // '4.12'
        def mockito_version = '3.11.2' // '2.23.0'
        def androidx_test_version = '1.4.0' // '1.2.0'
        def expresso_version = '3.4.0' // '3.2.0'
        def truth_version = '1.1.3' // '1.0'
        def core_testing_version = "2.1.0"

        // list of libs can be defined globally and called by implement in the modules.
        libraries = [
                // Kotlin standard library
                "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",

                // Coroutines
                "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version",
                "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version",

                // Android UI and appcompat
                "androidx.appcompat:appcompat:$appcompat_version",
                "com.google.android.material:material:$material_version",
                "androidx.constraintlayout:constraintlayout:$constraint_layout_version",

                // ViewModel and LiveData
                // TODO: LifeCycle 2.4.0, the extension will be deprecated, need to load artifacts separately
                // "androidx.lifecycle:lifecycle-extensions:$lifecycle_version",
                "androidx.lifecycle:lifecycle-livedata-ktx:$livedata_version",
                /* adds viewModelScope as a CoroutineScope to ViewModels, This scope is bound to Dispatchers.Main
                 * And will automatically be cancelled when the ViewModel is cleared.
                 */
                "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_viewmodel_version",

                "androidx.work:work-runtime-ktx:$work_version",

                // Room for database
                "androidx.room:room-ktx:$room_version",

                // network & serialization
                "com.google.code.gson:gson:$gson_version",
                "com.squareup.retrofit2:converter-gson:$retrofit_gson_version",
                "com.squareup.retrofit2:retrofit:$retrofit_version",
        ]

        librariesKapt = [
                "androidx.room:room-compiler:$room_version",
        ]

        librariesDebug = [
                "com.google.truth:truth:$truth_version",
        ]

        testLibraries = [
                "junit:junit:$junit_version",

                // Coroutines testing
                "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_android_version",

                // mocks
                "org.mockito:mockito-core:$mockito_version",

                //  Architecture Components testing libraries
                "androidx.arch.core:core-testing:$core_testing_version"
        ]

        androidTestLibraries = [
                "junit:junit:$junit_version",
                "androidx.test:runner:$androidx_test_version",
                "androidx.test:rules:$androidx_test_version",

                // Espresso
                "androidx.test.espresso:espresso-core:$expresso_version",
                "androidx.test.espresso:espresso-contrib:$expresso_version",
                "androidx.test.espresso:espresso-intents:$expresso_version",

                //  Architecture Components testing libraries
                "androidx.arch.core:core-testing:$core_testing_version",
                "androidx.work:work-testing:$work_version",

                /* Deprecated: Coroutines testing
                 * Note: JB coroutines test shall not be included with work manager testing in Instrumented Tests
                 * Otherwise two JNA will be generated by jetifier
                 * https://github.com/Kotlin/kotlinx.coroutines/issues/2023#issuecomment-627999486
                 * "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_android_version"
                 */
        ]
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
//        maven {
//            url "https://dl.bintray.com/kotlin/kotlin-eap"
//        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}